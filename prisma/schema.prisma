// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  role          Role?

  Accounts Account[]
  Sessions Session[]

  CoursesOwnedByUser Course[]
  OrdersPlaced       Order[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String @id @default(cuid())
  name        String
  description String
  price       Int
  image       String

  priceId         String
  stripeProductId String

  OrdersWithProduct Order[]
  Course            Course[]
}

model Order {
  id        String      @id @default(cuid())
  total     Int
  currency  String
  status    OrderStatus
  createdAt DateTime    @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  ProductsInOrder Product[]

  @@index([userId])
}

enum OrderStatus {
  CREATED
  PAID
  CANCELLED
  REFUNDED
}

model Course {
  id String @id @default(cuid())

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  VideosIncluded   Video[]
  UsersOwnedCourse User[]
  ImagesIncluded   Image[]

  @@index([productId])
}

model Video {
  id   String @id @default(cuid())
  key  String @unique
  name String
  url  String

  Course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@index([courseId])
}

model Image {
  id     String   @id @default(cuid())
  key    String   @unique
  url    String

  Course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@index([courseId])
}
